diff --git a/bio.c b/bio.c
index f4cb37c..b49d445 100644
--- a/bio.c
+++ b/bio.c
@@ -97,55 +97,94 @@ __bget(uint dev, uint blockno, bool direct)
 #define bget(a, b) __bget(a, b, false)
 #define bget_direct(a, b) __bget(a, b, true)
 
-// Return a locked buf with the contents of the indicated block.
 struct buf*
 bread(uint dev, uint blockno)
 {
-  struct buf *b, *b2;
+  struct buf *b, *b0, *bp;
+  int disk_num = blockno / FSSIZE;
 
   b = bget(dev, blockno);
   if (b->flags & B_VALID)
     return b;
 
-  //TODO implement here
-  if (BROKEN_DISK == 0) {
-    b2 = bget_direct(b->dev, b->blockno + FSSIZE);
-    iderw(b2); //read
+  if (disk_num != BROKEN_DISK) { // 고장 나지 않은 disk의 데이터가 invaild라면 그냥 다시 읽기
+    iderw(b);
+    return b;
+  }
 
-    for (int i = 0; i < BSIZE/sizeof(int); i++)
-      b->udata[i] = b2->udata[i];
+  if (disk_num < 2) { // 데이터 디스크가 고장난 경우
+    b0 = bget_direct(dev, (blockno % FSSIZE) + (((disk_num == 0) ? 1 : 0) * FSSIZE)); // 고장나지 않는 disk 읽기
+    iderw(b0);
+    bp = bget_direct(dev, (blockno % FSSIZE) + (2 * FSSIZE)); // 패리티 디스크 읽기
+    iderw(bp);
 
-    brelse(b2);
+    for (int i = 0; i < BSIZE/sizeof(int); i++) {
+      b->udata[i] = b0->udata[i] ^ bp->udata[i];
+    }
+    
+    brelse(b0);
+    brelse(bp);
+    b->flags |= B_VALID;
+  }
+  else if (disk_num == 2) { // 패리티 디스크가 고장난 경우
+    b0 = bget_direct(dev, blockno % FSSIZE); // disk 0 읽기
+    iderw(b0);
+    bp = bget_direct(dev, blockno % FSSIZE + FSSIZE); // disk 1 읽기
+    iderw(bp);
+
+    for (int i = 0; i < BSIZE/sizeof(int); i++) {
+      b->udata[i] = b0->udata[i] ^ bp->udata[i];
+    }
+    
+    brelse(b0);
+    brelse(bp);
     b->flags |= B_VALID;
-  } else {
-    iderw(b); //read
   }
 
   return b;
 }
 
-// Write b's contents to disk.  Must be locked.
 void
 bwrite(struct buf *b)
 {
-  struct buf *b2;
+  struct buf *b0, *bp;
+  int disk_num = b->blockno / FSSIZE;
+  int offset = b->blockno % FSSIZE;
 
   if(!holdingsleep(&b->lock))
     panic("bwrite");
 
-  //TODO implement here
-  if (BROKEN_DISK != 1) {
-    b2 = bget_direct(b->dev, b->blockno + FSSIZE);
-
-    for (int i = 0; i < BSIZE/sizeof(int); i++)
-      b2->udata[i] = b->udata[i];
+  b0 = bget_direct(b->dev, offset + ((disk_num == 0 ? 1 : 0) * FSSIZE));
+  iderw(b0);
+  bp = bget_direct(b->dev, offset + (2 * FSSIZE));
+  iderw(bp);
 
-    b2->flags |= B_DIRTY;
-    iderw(b2); //write
-    brelse(b2);
+  // 기존의 부서진 것 복구 -> 다른 disk, parity가 부서졌을 때만 복구 -> 어차피 업데이트 될 거는 복구 안되도 괜찮다!
+  if (BROKEN_DISK == (disk_num == 0 ? 1 : 0)) {
+    for (int i = 0; i < BSIZE/sizeof(int); i++) {
+      b0->udata[i] = b->udata[i] ^ bp->udata[i];
+    }
+  }
+  if (BROKEN_DISK == 2) {
+    for (int i = 0; i < BSIZE/sizeof(int); i++) {
+      bp->udata[i] = b->udata[i] ^ b0->udata[i];
+    }
+  }
+  
+  // 새로운 패리티 계산
+  for (int i = 0; i < BSIZE/sizeof(int); i++) {
+    bp->udata[i] = b->udata[i] ^ b0->udata[i];
   }
+
+  // 데이터와 패리티 모두 쓰기
   b->flags |= B_DIRTY;
-  iderw(b); //write
+  bp->flags |= B_DIRTY;
+  
+  iderw(b);
+  iderw(bp);
+
+  brelse(b0);
+  brelse(bp);
 }
 
 // Release a locked buffer.
@@ -175,3 +214,6 @@ brelse(struct buf *b)
 //PAGEBREAK!
 // Blank page.
 
+
+
+
diff --git a/ide.c b/ide.c
index 960ba5d..4852b95 100644
--- a/ide.c
+++ b/ide.c
@@ -75,7 +75,7 @@ idestart(struct buf *b)
 {
   if(b == 0)
     panic("idestart");
-  if(b->blockno >= FSSIZE*2)
+  if(b->blockno >= FSSIZE*3) // 수정 (o): 여긴 Disk size
     panic("incorrect blockno");
   int sector_per_block =  BSIZE/SECTOR_SIZE;
   int sector = b->blockno * sector_per_block;
diff --git a/mkfs_2.c b/mkfs_2.c
index f41f2d6..7ee43f8 100644
--- a/mkfs_2.c
+++ b/mkfs_2.c
@@ -11,41 +11,96 @@
 
 int main(int argc, char *argv[])
 {
-	unsigned char buf[BSIZE];
-	int ret;
-	int rdfd = open(argv[1], O_RDONLY);
-	if (rdfd < 0) {
-		perror("rdfd open");
-		exit(1);
-	}
-	int wrfd = open(argv[2], O_RDWR | O_CREAT | O_TRUNC, 0644);
-	if (wrfd < 0) {
-		perror("wrfd open");
-		exit(1);
-	}
-
-	//TODO implement here
-	ftruncate(wrfd, (FSSIZE * 2) * BSIZE);
-
-	for (int blockno = 0; blockno < FSSIZE; blockno++) {
-		ret = pread(rdfd, buf, BSIZE, (BSIZE * blockno));
-		if (ret == 0)
-			break;
-		if (ret != BSIZE) {
-			perror("pread");
-			exit(1);
-		}
-		ret = pwrite(wrfd, buf, BSIZE, (BSIZE * blockno));
-		if (ret != BSIZE) {
-			perror("pwrite1");
-			exit(1);
-		}
-		ret = pwrite(wrfd, buf, BSIZE, (blockno + FSSIZE) * BSIZE);
-		if (ret != BSIZE) {
-			perror("pwrite2");
-			exit(1);
-		}
-	}
-	close(rdfd);
-	close(wrfd);
-}
+    unsigned char buf0[BSIZE];
+	unsigned char buf1[BSIZE];
+    unsigned char parity[BSIZE];
+    int ret;
+    
+    // 입력 파일과 출력 파일 열기
+    int rdfd = open(argv[1], O_RDONLY);
+    if (rdfd < 0) {
+        perror("rdfd open");
+        exit(1);
+    }
+    int wrfd = open(argv[2], O_RDWR | O_CREAT | O_TRUNC, 0644);
+    if (wrfd < 0) {
+        perror("wrfd open");
+        exit(1);
+    }
+
+    // RAID 4 시스템을 위한 공간 할당 (데이터 디스크 2개 + 패리티 디스크 1개)
+    ftruncate(wrfd, (FSSIZE * 3) * BSIZE);
+
+    // 각 블록에 대해 처리
+    for (int i = 0; i < FSSIZE; i++) {
+        // 첫 번째 디스크의 데이터 읽기
+        ret = pread(rdfd, buf0, BSIZE, i * BSIZE);
+        if (ret == 0) // EOF
+            break;
+        if (ret != BSIZE) {
+            perror("pread disk 0");
+            exit(1);
+        }
+        
+        // 첫 번째 디스크에 데이터 쓰기
+        ret = pwrite(wrfd, buf0, BSIZE, i * BSIZE);
+        if (ret != BSIZE) {
+            perror("pwrite disk 0");
+            exit(1);
+        }
+
+        // 두 번째 디스크의 데이터 읽기
+        ret = pread(rdfd, buf1, BSIZE, (i + FSSIZE) * BSIZE);
+        if (ret != BSIZE && ret != 0) {
+            perror("pread disk 1");
+            exit(1);
+        }
+
+        // 두 번째 디스크에 데이터 쓰기
+        ret = pwrite(wrfd, buf1, BSIZE, (i + FSSIZE) * BSIZE);
+        if (ret != BSIZE) {
+            perror("pwrite disk 1");
+            exit(1);
+        }
+
+        // 패리티 계산
+        // 패리티 디스크에 읽기
+        ret = pread(wrfd, parity, BSIZE, (i + FSSIZE * 2) * BSIZE);
+        if (ret != BSIZE) {
+            perror("pread parity disk");
+            exit(1);
+        }
+        
+        // 첫 번째 디스크 데이터 읽기
+        unsigned char disk0_data[BSIZE];
+        ret = pread(wrfd, disk0_data, BSIZE, i * BSIZE);
+        if (ret != BSIZE) {
+            perror("pread parity disk");
+            exit(1);
+        }
+
+        // 두 번째 디스크 데이터 읽기
+        unsigned char disk1_data[BSIZE];
+        ret = pread(wrfd, disk1_data, BSIZE, (i + FSSIZE) * BSIZE);
+        if (ret != BSIZE) {
+            perror("pread parity disk");
+            exit(1);
+        }
+
+        // XOR 연산으로 패리티 계산
+        for (int j = 0; j < BSIZE; j++) {
+            parity[j] = disk0_data[j] ^ disk1_data[j];
+        }
+
+        // 패리티 디스크에 쓰기
+        ret = pwrite(wrfd, parity, BSIZE, (i + FSSIZE * 2) * BSIZE);
+        if (ret != BSIZE) {
+            perror("pwrite parity disk");
+            exit(1);
+        }
+    }
+
+    close(rdfd);
+    close(wrfd);
+    return 0;
+}
\ No newline at end of file
diff --git a/param.h b/param.h
index a7e90ef..258db01 100644
--- a/param.h
+++ b/param.h
@@ -10,5 +10,5 @@
 #define MAXOPBLOCKS  10  // max # of blocks any FS op writes
 #define LOGSIZE      (MAXOPBLOCKS*3)  // max data blocks in on-disk log
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
-#define FSSIZE       1000  // size of file system in blocks
-
+#define FSSIZE       1000  // size of file system in blocks 
+// 수정: 여긴 file sys size -> 유지
\ No newline at end of file

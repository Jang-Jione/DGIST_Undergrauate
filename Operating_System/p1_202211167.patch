diff --git a/proc.c b/proc.c
index 806b1b1..f1dbe56 100644
--- a/proc.c
+++ b/proc.c
@@ -9,7 +9,7 @@
 
 struct {
   struct spinlock lock;
-  struct proc proc[NPROC];
+  struct proc proc[NPROC]; // NPROC는 프로세스의 크기라고 한다.
 } ptable;
 
 static struct proc *initproc;
@@ -88,6 +88,7 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
+  p->queue_level = TOP_LEVEL_QUEUE;
 
   release(&ptable.lock);
 
@@ -319,41 +320,176 @@ wait(void)
 //  - swtch to start running that process
 //  - eventually that process transfers control
 //      via swtch back to the scheduler.
+
+const char* procstate_to_string(enum procstate state) { // state 확인 코드
+    switch (state) {
+        case RUNNING: return "RUNNING";
+        case RUNNABLE: return "RUNNABLE";
+        case SLEEPING: return "SLEEPING";
+        case ZOMBIE: return "ZOMBIE";
+        case EMBRYO: return "EMBRYO";
+        case UNUSED: return "UNUSED";
+        default: return "UNKNOWN";
+    }
+}
+
 void
 scheduler(void)
 {
   struct proc *p;
   struct cpu *c = mycpu();
   c->proc = 0;
+  int CPU0_boosting = 0;
+  int CPU1_boosting = 0;
+  int CPU0_timeslice = 10;
+  int CPU0_timeslice_counter = 0;
+  int CPU1_timeslice = 500;
+  int CPU1_timeslice_counter = 0;
   
   for(;;){
     // Enable interrupts on this processor.
     sti();
 
-    // Loop over process table looking for process to run.
-    acquire(&ptable.lock);
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->state != RUNNABLE)
-        continue;
-
-      // Switch to chosen process.  It is the process's job
-      // to release ptable.lock and then reacquire it
-      // before jumping back to us.
-      c->proc = p;
-      switchuvm(p);
-      p->state = RUNNING;
-
-      swtch(&(c->scheduler), p->context);
-      switchkvm();
+    if (c->apicid == 0) { // light한 것들은(Q level이 높은 것들) CPU0에 할당, init proc은 MLPQ top에 있으므로 당연히 CPU0에 할당된다.
+      for (int i = TOP_LEVEL_QUEUE; i > 2 ; i--) { // Q high에서 low로 실행, ;;(inf.) 무한 반복
+        
+        uint timeslice = 3*(5-i); // timeslice는 Q level 내려갈 수록 커진다.
+
+        // Loop over process table looking for process to run.
+        acquire(&ptable.lock);
+        for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+          if(p->state != RUNNABLE)
+            continue;
+
+          if (p->state == RUNNABLE && p->queue_level == i) { // 해당 Q level에 있는 것 선택 -> for문으로 해당 Q 돎으로 해당 Q에 있는 proc들 자연스럽게 RR되서 실행된다.
+            // Switch to chosen process.  It is the process's job
+            // to release ptable.lock and then reacquire it
+            // before jumping back to us.
+            uint start_time = ticks;
+            c->proc = p;
+            switchuvm(p);
+            p->state = RUNNING;
+            swtch(&(c->scheduler), p->context);
+            // cprintf("Process %d state: %s\n", p->pid, procstate_to_string(p->state));
+
+            while (ticks - start_time <= timeslice) {
+                if (p->state == RUNNABLE) {
+                } else {
+                    break; 
+                }
+                p->state = RUNNING;
+                swtch(&(c->scheduler), p->context);
+            } 
+
+            // 타임슬라이스를 모두 사용했는지 확인
+            if (p->state == RUNNABLE) {
+              p->queue_level--;
+              if (p->queue_level <= 0) {
+                  p->queue_level = 1;
+              }
+            }
+
+            switchkvm();
+
+            CPU0_timeslice_counter += ticks - start_time;
+
+            if (CPU0_timeslice_counter >= CPU0_timeslice) { // timeslice 넘기면 다시 실행
+              i = TOP_LEVEL_QUEUE;
+              CPU0_timeslice_counter = 0;
+            }
+
+            CPU0_boosting++;
+            if (CPU0_boosting >= 50) { // 일정 시간 지나면 boosting
+              for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+                  if (p->queue_level > 2)  p->queue_level = TOP_LEVEL_QUEUE; 
+              }
+              CPU0_boosting = 0; 
+            }
+
+            // Process is done running for now.
+            // It should have changed its p->state before coming back.
+            c->proc = 0;
+          }
+        }
+        release(&ptable.lock);
+      }
+    }
 
-      // Process is done running for now.
-      // It should have changed its p->state before coming back.
-      c->proc = 0;
+    if (c->apicid == 1) { // heavy한 것들은(Q level이 낮은 것들) CPU1에 할당
+      for (int i = 2; i > 0 ; i--) { // Q high에서 low로 실행, ;;(inf.) 무한 반복
+
+        uint timeslice = 100*(5-i); // timeslice는 Q level 내려갈 수록 커진다.
+
+        // Loop over process table looking for process to run.
+        acquire(&ptable.lock);
+        for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+          if(p->state != RUNNABLE)
+            continue;
+
+          if (p->state == RUNNABLE && p->queue_level == i) { // 해당 Q level에 있는 것 선택 -> for문으로 해당 Q 돎으로 해당 Q에 있는 proc들 자연스럽게 RR되서 실행된다.
+            // Switch to chosen process.  It is the process's job
+            // to release ptable.lock and then reacquire it
+            // before jumping back to us.
+            uint start_time = ticks;
+            c->proc = p;
+            switchuvm(p);
+            p->state = RUNNING;
+            swtch(&(c->scheduler), p->context);
+
+            while (ticks - start_time <= timeslice) {
+                if (p->state == RUNNABLE) {
+                } else {
+                    break; 
+                }
+                p->state = RUNNING;
+                swtch(&(c->scheduler), p->context);
+            }
+
+            if (p->state == RUNNABLE) {
+              p->queue_level--;
+              if (p->queue_level <= 0) {
+                  p->queue_level = 1;
+              }
+            }
+
+            switchkvm();
+
+            CPU1_timeslice_counter += ticks - start_time;
+
+            if (CPU1_timeslice_counter >= CPU1_timeslice) { // timeslice 넘기면 다시 실행
+              i = 2;
+              CPU1_timeslice_counter = 0;
+            }
+
+            CPU1_boosting++;
+            if (CPU1_boosting >= 50) { // 일정 시간 지나면 boosting
+              for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+                  if (p->queue_level <= 2)  p->queue_level = 2; 
+              }
+              CPU0_boosting = 0; 
+            }
+
+            // Process is done running for now.
+            // It should have changed its p->state before coming back.
+            c->proc = 0;
+          }
+        }
+        release(&ptable.lock);
+      }
     }
-    release(&ptable.lock);
 
+    // boosting++;
+    // if (boosting >= 1000) { // 일정 시간 지나면 boosting
+    //   acquire(&ptable.lock);
+    //   for (p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+    //       p->queue_level = TOP_LEVEL_QUEUE; 
+    //   }
+    //   release(&ptable.lock);
+    //   boosting = 0; 
+    // }
   }
 }
+// boost 구현하기
 
 // Enter scheduler.  Must hold only ptable.lock
 // and have changed proc->state. Saves and restores
diff --git a/proc.h b/proc.h
index 1647114..4efce97 100644
--- a/proc.h
+++ b/proc.h
@@ -34,6 +34,10 @@ struct context {
 
 enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
 
+#define TOP_LEVEL_QUEUE 4
+#define QUEUE_TIME_SLICE 1
+
+
 // Per-process state
 struct proc {
   uint sz;                     // Size of process memory (bytes)
@@ -49,6 +53,7 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int queue_level;
 };
 
 // Process memory is laid out contiguously, low addresses first:
